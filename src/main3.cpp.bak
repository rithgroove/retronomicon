#include "retronomicon/lib/graphic/window.h"
#include "retronomicon/lib/graphic/font.h"
#include "retronomicon/lib/graphic/sprite.h"
#include <SDL.h>
#include <stdio.h>


#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480

SDL_Texture* renderText (retronomicon::lib::graphic::Font main_font,SDL_Renderer *ren, SDL_Surface* screen, char* string,int x, int y, SDL_Color fgC, SDL_Color bgC) {
    TTF_SetFontStyle(main_font.getRawFont(), TTF_STYLE_BOLD);
    SDL_Surface* textSurface = TTF_RenderText_Solid(main_font.getRawFont(), string, fgC);     // aliased glyphs
    // SDL_Surface* textSurface = TTF_RenderText_Shaded(main_font.getRawFont(), string, fgC, bgC);   // anti-aliased glyphs
    SDL_Rect textLocation = { x, y, 0, 0 };
    if (SDL_BlitSurface(textSurface, NULL, screen, &textLocation) == 0){
        printf("\nsuccess to blit surface");
        fflush(stdout);
    }else{
        printf("\nfailed to blit surface");
        fflush(stdout);
    }

    SDL_Texture* texture = SDL_CreateTextureFromSurface(ren,textSurface);
    SDL_FreeSurface(textSurface);
    return texture;
    //printf("[ERROR] Unknown error in drawText(): %s\n", TTF_GetError()); return 1;
}

int main2(int argc, char* argv[]) {
    retronomicon::lib::graphic::Window window("My SDL2 Game", SCREEN_WIDTH, SCREEN_HEIGHT); //directly initiate to a variable named "window"
    SDL_Event wEvent;                               // Enable the Window Event handler...
    SDL_Surface* screenSurface = SDL_GetWindowSurface(window.getRawWindow());

    retronomicon::lib::graphic::Font main_font("./asset/font/Code38-manaspace/manaspc.ttf",16); //directly initiate to a variable named "main_font"
    SDL_Color fgC1 = { 0xff,0xff,0xff }, bgC1 = {0x00,0x00,0xa0};                               // white text on blue background
    printf("\ndraw text");  
    fflush(stdout);
    retronomicon::lib::graphic::Sprite sprite(window.getRenderer(), "./asset/sprite/miho-test.png");

    
    printf("\nDelay");  
    fflush(stdout);
    SDL_Delay(1000);  // Wait 1 sec for greasy fingers
    bool eQuit = false;
    printf("\nmain loop");  
    fflush(stdout);
    while (!eQuit) {
        printf("\nmasuk while\n");
        fflush(stdout);


        SDL_Renderer *ren = window.getRenderer();
        SDL_SetRenderDrawColor(ren, 0, 0, 255, 255);
        SDL_RenderClear(ren);


        // Draw and animate
        SDL_SetRenderDrawColor(ren, 255, 0, 0, 255);
        SDL_Rect fillRect = { SCREEN_WIDTH  / 4, SCREEN_HEIGHT / 4,
                                  SCREEN_WIDTH/2, SCREEN_HEIGHT / 2 };
        SDL_RenderFillRect(ren, &fillRect);

        SDL_Texture* texture = renderText(main_font,ren,screenSurface, (char*) "Hello Dum dum! ",64,50,fgC1,bgC1);
        fillRect = { 50, 50, 300,  100 };
        SDL_RenderCopy(ren,texture, NULL,&fillRect);

        sprite .render(100,100);

        window.present();



        while(SDL_PollEvent(&wEvent)) {
            printf("masuk while2\n");
            fflush(stdout);
            switch (wEvent.type) {
                case SDL_QUIT:
                    eQuit = true; 
                    printf("sdl quit\n");
                    fflush(stdout);
                    break;
                case SDL_KEYDOWN:
                    eQuit = true; 
                    printf("sdl keydown\n");
                    fflush(stdout);
                    break;
                case SDL_MOUSEBUTTONDOWN:   
                    eQuit = true; 
                    printf("mouse down\n");
                    fflush(stdout);
                    break;
                case SDL_WINDOWEVENT_CLOSE: 
                    eQuit = true; 
                    printf("windows closed\n");
                    fflush(stdout);
                    break;
                default:
                    //SDL_Log("Window %d got unknown event %d\n", wEvent.window.windowID, wEvent.window.event);
                    printf("default\n");
                    break;
            }
        }
        SDL_Delay(100); // Keep < 500 [ms]
    }
    SDL_Quit();
    TTF_Quit();

    return 0;
}