#include "retronomicon/lib/graphic/renderable/sprite.h"

/**
 * @brief The namespace for anything renderable that is not a screen.
 */
namespace retronomicon::lib::graphic::renderable{
            
    /**
     * @brief a constructor for the sprite
     * 
     * @param rawImage the raw image generated by Asset Manager
     * @param rect the rectangle tha represent the position of this sprite
     */
    Sprite::Sprite(RawImage* image, Rect* rect){
        m_rawImage = image;
        m_rect = rect;
        m_flip = false;
    }


    // Sprite::~Sprite() {
    //     //TTF_Quit(); //might need this later
    // }

    /**
     * @brief update function (might change in the future).
     * Potential update is to use time interval so we could do frame skipping
     * 
     * @return true if successfull, false if failed
     */
    bool Sprite::update(){
        return true;
    } 

    /**
     * @brief the method to render the objects
     * 
     * @parameter renderer the renderer the object will use
     * @return true if successfull, false if failed
     */
    bool Sprite::render(SDL_Renderer* renderer){
        SDL_Rect dstRect = m_rect->generateSDLRect();
        SDL_RendererFlip flip = SDL_FLIP_NONE ;
        cout << ("render") << endl;
        if (m_flip){
            cout << ("flip") << endl;
            flip = SDL_FLIP_HORIZONTAL;   
        }
        SDL_RenderCopyEx(renderer, m_rawImage->getTexture(), nullptr, &dstRect, 0.0, nullptr, flip);
    }

    /**
     * @brief a method to get wether the sprite flipped horizontally
     * 
     * @return the flip value
     */
    bool Sprite::getFlip(){
        return m_flip;
    }

    /**
     * @brief a method to flip the sprite horizontally
     * 
     * @return the flip value after flipping
     */
    bool Sprite::flip(){
            cout << ("\npanggil flip") << endl;
        m_flip = !m_flip;
        return m_flip;
    }

}