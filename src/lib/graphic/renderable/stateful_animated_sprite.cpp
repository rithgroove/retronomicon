#include "retronomicon/lib/graphic/renderable/stateful_animated_sprite.h"
/**
 * This namespace is for handling asset loading 
 */
namespace retronomicon::lib::graphic::renderable{
            
    /**
     * @brief a constructor for the Stateless animated sprite
     * 
     * @param rawImage the raw image generated by Asset Manager
     * @param rect the rectangle tha represent the position of this sprite
     * @param sequence the animation sequence
     */
    StatefulAnimatedSprite::StatefulAnimatedSprite(RawImage* image, Rect* rect, SequenceManager* sequenceManager)
    :Sprite(image,rect){
        m_sequenceManager = sequenceManager;
    }

    // Sprite::~Sprite() {
    //     //TTF_Quit(); //might need this later
    // }


    /**
     * @brief update function (might change in the future).
     * Potential update is to use time interval so we could do frame skipping
     * 
     * @return true if successfull, false if failed
     */
    bool StatefulAnimatedSprite::update(){
        m_sequenceManager->update(200.0f);
        return true;
    } 
    
    /**
     * @brief the method to render the objects
     * 
     * @parameter renderer the renderer the object will use
     * @return true if successfull, false if failed
     */
    bool StatefulAnimatedSprite::render(SDL_Renderer* renderer){
        SDL_Rect dstRect = m_rect->generateSDLRect();
        SDL_RendererFlip flip = SDL_FLIP_NONE ;
        cout << ("render") << endl;
        if (m_flip){
            cout << ("flip") << endl;
            flip = SDL_FLIP_HORIZONTAL;   
        }
        SDL_Rect srcRect =  m_sequenceManager->getCurrentSequence()->getCurrentFrame().getRect()->generateSDLRect();
        SDL_RenderCopyEx(renderer, m_rawImage->getTexture(), &srcRect, &dstRect, 0.0, nullptr, flip);
    } 


}