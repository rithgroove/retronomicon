#pragma once

#include <iostream>

#include "renderable.h"
#include "retronomicon/lib/asset/raw_image.h"
#include "retronomicon/lib/math/rect.h"

using namespace retronomicon::lib::math;
using namespace retronomicon::lib::asset;
using namespace retronomicon::lib::graphic::renderable;
using namespace std;
/**
 * @brief The namespace for anything renderable that is not a screen.
 */
namespace retronomicon::lib::graphic::renderable{
	/**
	 * @brief A class for a static sprite.
	 */
    class Sprite : public Renderable {
	    public:
	    	/**
	    	 * @brief a constructor for the sprite
	    	 * 
	    	 * @param rawImage the raw image generated by Asset Manager
	    	 * @param rect the rectangle tha represent the position of this sprite
	    	 */
        	Sprite(RawImage* rawImage, Rect* rect);
	    	// ~Sprite();

	    	/**
	    	 * @brief update function (might change in the future).
	    	 * Potential update is to use time interval so we could do frame skipping
	    	 * 
	    	 * @return true if successfull, false if failed
	    	 */

	    	bool update() override;

	    	/**
	    	 * @brief the method to render the objects
	    	 * 
	    	 * @parameter renderer the renderer the object will use
	    	 * @return true if successfull, false if failed
	    	 */
	    	bool render(SDL_Renderer* renderer) override;

	    	/**
	    	 * @brief a method to get wether the sprite flipped horizontally
	    	 * 
	    	 * @return the flip value
	    	 */
	    	bool getFlip();

	    	/**
	    	 * @brief a method to flip the sprite horizontally
	    	 * 
	    	 * @return the flip value after flipping
	    	 */
	    	bool flip();
	    protected:
	    	RawImage* m_rawImage;
	    	Rect* m_rect;   
	    	bool m_flip; // true = facing right
    };
} // namespace Retronomicon